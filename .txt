// func (s *BlogServices) FetchAllBlogs() (*response.ServerErrRes, *response.ServerRes, error) {
// 	if err_2 != nil {
// 		return &response.ServerErrRes{
// 			Status:   400,
// 			Response: "Sever Falied",
// 		}, nil, err_2
// 	}

// 	// slice to hold the results
// 	var blogs []model.Blog

// 	filter := bson.M{}

// 	cursor, err := collectionBlog.Find(context.Background(), filter)
// 	if err != nil {
// 		return &response.ServerErrRes{
// 			Status:   500,
// 			Response: "Failed to fetch blogs",
// 		}, nil, err
// 	}
// 	defer cursor.Close(context.Background())

// 	if err = cursor.All(context.Background(), &blogs); err != nil {
// 		return &response.ServerErrRes{
// 			Status:   500,
// 			Response: "Failed to decode blogs",
// 		}, nil, err
// 	}

// 	return nil, &response.ServerRes{
// 		Status:   200,
// 		Success:  true,
// 		Response: blogs,
// 		Error:    nil,
// 	}, nil
// }


// func (s *GetAllBlogController) FetchAllBlogs() gin.HandlerFunc {
// 	return func(ctx *gin.Context) {

// 		_, response, err := s.Services.FetchAllBlogs()

// 		if !(helper.InternalServerError(ctx, err)) {
// 			return
// 		}

// 		ctx.JSON(http.StatusOK, gin.H{"response": response})
// 	}
// }




func (s *CommentServices) DeleteCommentewdwedwe(commentId string) (*response.ServerErrRes, *response.ServerRes, error) {
	if err_5 != nil {
		return &response.ServerErrRes{
			Status:   400,
			Response: "Sever Falied",
		}, nil, err_5
	}

	// id, _, _ := helper.ConvertStringToObjectID(commentId)

	id := "wejdhjj"

	filter := bson.M{"_id": id}

	result, err := collectionComment.DeleteOne(context.Background(), filter)

	if err != nil {
		return nil, &response.ServerRes{
			Status:   400,
			Success:  false,
			Response: nil,
			Error:    err,
		}, err
	}

	return nil, &response.ServerRes{
		Status:   200,
		Success:  true,
		Response: result,
		Error:    nil,
	}, nil
}

func (s *CommentServices) DeleteCommentewdwedwe(commentId string) (*response.ServerErrRes, *response.ServerRes, error) {
	if err_5 != nil {
		return &response.ServerErrRes{
			Status:   400,
			Response: "Sever Falied",
		}, nil, err_5
	}

	// id, _, _ := helper.ConvertStringToObjectID(commentId)

	id := "wejdhjj"

	filter := bson.M{"_id": id}

	result, err := collectionComment.DeleteOne(context.Background(), filter)

	if err != nil {
		return nil, &response.ServerRes{
			Status:   400,
			Success:  false,
			Response: nil,
			Error:    err,
		}, err
	}

	return nil, &response.ServerRes{
		Status:   200,
		Success:  true,
		Response: result,
		Error:    nil,
	}, nil
}

func (s *DeleteBlogController) DeleteComment() gin.HandlerFunc {
	return func(ctx *gin.Context) {

		var deleteCommentModel struct {
			ID string `json:"_id" binding:"required"`
		}

		deleteCommentData := &deleteCommentModel

		if !(helper.BindJSON(ctx, &deleteCommentData)) {
			return
		}

		_, response, err := s.Services.DeleteCommentewdwedwe()

		if !(helper.InternalServerError(ctx, err)) {
			return
		}

		ctx.JSON(http.StatusOK, gin.H{"response": response})
	}
}
